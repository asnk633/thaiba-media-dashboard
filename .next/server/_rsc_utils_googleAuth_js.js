/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_utils_googleAuth_js";
exports.ids = ["_rsc_utils_googleAuth_js"];
exports.modules = {

/***/ "?d272":
/*!********************************!*\
  !*** supports-color (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./utils/googleAuth.js":
/*!*****************************!*\
  !*** ./utils/googleAuth.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGoogleSpreadsheetClient: () => (/* binding */ getGoogleSpreadsheetClient),\n/* harmony export */   testGoogleSheetsConnection: () => (/* binding */ testGoogleSheetsConnection)\n/* harmony export */ });\n/* harmony import */ var google_spreadsheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-spreadsheet */ \"(rsc)/./node_modules/google-spreadsheet/dist/index.mjs\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n\n\n// Helper function to safely parse JSON from environment variable\nfunction parseServiceAccountKey() {\n    try {\n        const serviceAccountKey = process.env.GOOGLE_SERVICE_ACCOUNT_KEY;\n        if (!serviceAccountKey) {\n            throw new Error(\"GOOGLE_SERVICE_ACCOUNT_KEY environment variable is not set\");\n        }\n        console.log(\"\\uD83D\\uDD10 Parsing service account key...\");\n        console.log(\"\\uD83D\\uDD10 Key length:\", serviceAccountKey.length);\n        console.log(\"\\uD83D\\uDD10 Key starts with:\", serviceAccountKey.substring(0, 20) + \"...\");\n        // Parse the JSON\n        const keyData = JSON.parse(serviceAccountKey);\n        const requiredFields = [\n            \"type\",\n            \"project_id\",\n            \"private_key\",\n            \"client_email\"\n        ];\n        for (const field of requiredFields){\n            if (!keyData[field]) {\n                throw new Error(`Service account key is missing required field: ${field}`);\n            }\n        }\n        // Fix newlines in private key if they were escaped\n        if (keyData.private_key) {\n            keyData.private_key = keyData.private_key.replace(/\\\\n/g, \"\\n\");\n            console.log(\"\\uD83D\\uDD10 Private key format corrected\");\n        }\n        console.log(\"\\uD83D\\uDD10 Service account email:\", keyData.client_email);\n        console.log(\"\\uD83D\\uDD10 Project ID:\", keyData.project_id);\n        return keyData;\n    } catch (error) {\n        console.error(\"‚ùå Error parsing service account key:\");\n        console.error(\"   Message:\", error.message);\n        if (error.message.includes(\"Unexpected token\")) {\n            throw new Error(`Service account key is not valid JSON. Check for escaped quotes or formatting issues.`);\n        } else if (error.message.includes(\"not set\")) {\n            throw new Error(`GOOGLE_SERVICE_ACCOUNT_KEY environment variable is not set in your Vercel project settings.`);\n        } else {\n            throw new Error(`Failed to parse service account key: ${error.message}`);\n        }\n    }\n}\n// Create and configure Google Spreadsheet client\nasync function getGoogleSpreadsheetClient(spreadsheetId) {\n    try {\n        console.log(\"\\uD83D\\uDD10 Initializing Google Spreadsheet client...\");\n        const serviceAccountKey = parseServiceAccountKey();\n        const serviceAccountAuth = new google_auth_library__WEBPACK_IMPORTED_MODULE_1__.JWT({\n            email: serviceAccountKey.client_email,\n            key: serviceAccountKey.private_key,\n            scopes: [\n                \"https://www.googleapis.com/auth/spreadsheets\"\n            ]\n        });\n        console.log(\"\\uD83D\\uDD10 JWT authentication configured\");\n        console.log(\"\\uD83D\\uDD10 Connecting to spreadsheet:\", spreadsheetId);\n        // Create Google Spreadsheet instance\n        const doc = new google_spreadsheet__WEBPACK_IMPORTED_MODULE_0__.GoogleSpreadsheet(spreadsheetId, serviceAccountAuth);\n        console.log(\"\\uD83D\\uDCCA Loading spreadsheet info...\");\n        await doc.loadInfo();\n        console.log(\"‚úÖ Google Spreadsheet client authorized successfully\");\n        console.log(`üìä Connected to: \"${doc.title}\"`);\n        console.log(`üìä Sheet count: ${doc.sheetCount}`);\n        return doc;\n    } catch (error) {\n        console.error(\"‚ùå Google Spreadsheet authorization failed:\");\n        console.error(\"   Message:\", error.message);\n        console.error(\"   Stack:\", error.stack);\n        if (error.message.includes(\"invalid_grant\")) {\n            console.error(\"\\uD83D\\uDCA1 invalid_grant error solutions:\");\n            console.error(\"   1. Check system clock is synchronized (JWT tokens are time-sensitive)\");\n            console.error(\"   2. Verify private key format (newlines should be actual \\\\n characters)\");\n            console.error(\"   3. Ensure service account hasn't been deleted or disabled\");\n            console.error(\"   4. Check if service account key has been rotated\");\n            throw new Error(\"Google authentication failed: invalid_grant. Check system time and service account key format.\");\n        } else if (error.message.includes(\"403\") || error.message.includes(\"Forbidden\")) {\n            console.error(\"\\uD83D\\uDCA1 403 Forbidden error solutions:\");\n            console.error(\"   1. Share the spreadsheet with service account email:\", parseServiceAccountKey().client_email);\n            console.error(\"   2. Grant 'Editor' permissions to the service account\");\n            console.error(\"   3. Verify the spreadsheet ID is correct\");\n            throw new Error(`Spreadsheet access denied. Share spreadsheet with: ${parseServiceAccountKey().client_email}`);\n        } else if (error.message.includes(\"404\") || error.message.includes(\"Not Found\")) {\n            console.error(\"\\uD83D\\uDCA1 404 Not Found error solutions:\");\n            console.error(\"   1. Verify the spreadsheet ID is correct\");\n            console.error(\"   2. Check if the spreadsheet exists and is accessible\");\n            throw new Error(\"Spreadsheet not found. Check the GOOGLE_SPREADSHEET_ID.\");\n        } else {\n            throw error;\n        }\n    }\n}\n// Test function to verify connection\nasync function testGoogleSheetsConnection(spreadsheetId) {\n    try {\n        const doc = await getGoogleSpreadsheetClient(spreadsheetId);\n        console.log(\"‚úÖ Successfully connected to spreadsheet:\", doc.title);\n        console.log(`üìä Sheet count: ${doc.sheetCount}`);\n        // List available sheets\n        doc.sheetsByIndex.forEach((sheet, index)=>{\n            console.log(`   ${index + 1}. ${sheet.title} (${sheet.rowCount} rows, ${sheet.columnCount} cols)`);\n        });\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Connection test failed:\", error.message);\n        if (error.message.includes(\"403\") || error.message.includes(\"Forbidden\")) {\n            console.error(\"\\uD83D\\uDCA1 403 Forbidden usually means:\");\n            console.error(\"   - Spreadsheet is not shared with service account\");\n            console.error(\"   - Service account email:\", parseServiceAccountKey().client_email);\n        }\n        return false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsRUFBRThCLFFBQVEsRUFBRSxFQUFFLEVBQUVELE1BQU1OLEtBQUssQ0FBQyxFQUFFLEVBQUVNLE1BQU1FLFFBQVEsQ0FBQyxPQUFPLEVBQUVGLE1BQU1HLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDbkc7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPcEIsT0FBTztRQUNkYixRQUFRYSxLQUFLLENBQUMsNkJBQTZCQSxNQUFNQyxPQUFPO1FBRXhELElBQUlELE1BQU1DLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLFVBQVVGLE1BQU1DLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDLGNBQWM7WUFDeEVmLFFBQVFhLEtBQUssQ0FBQztZQUNkYixRQUFRYSxLQUFLLENBQUM7WUFDZGIsUUFBUWEsS0FBSyxDQUFDLCtCQUErQm5CLHlCQUF5QmlCLFlBQVk7UUFDcEY7UUFFQSxPQUFPO0lBQ1Q7QUFDRjtBQUVpRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtbmV4dGpzLWFwcC8uL3V0aWxzL2dvb2dsZUF1dGguanM/YzZiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVTcHJlYWRzaGVldCB9IGZyb20gXCJnb29nbGUtc3ByZWFkc2hlZXRcIlxuaW1wb3J0IHsgSldUIH0gZnJvbSBcImdvb2dsZS1hdXRoLWxpYnJhcnlcIlxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2FmZWx5IHBhcnNlIEpTT04gZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuZnVuY3Rpb24gcGFyc2VTZXJ2aWNlQWNjb3VudEtleSgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzZXJ2aWNlQWNjb3VudEtleSA9IHByb2Nlc3MuZW52LkdPT0dMRV9TRVJWSUNFX0FDQ09VTlRfS0VZXG5cbiAgICBpZiAoIXNlcnZpY2VBY2NvdW50S2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHT09HTEVfU0VSVklDRV9BQ0NPVU5UX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0XCIpXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCLwn5SQIFBhcnNpbmcgc2VydmljZSBhY2NvdW50IGtleS4uLlwiKVxuICAgIGNvbnNvbGUubG9nKFwi8J+UkCBLZXkgbGVuZ3RoOlwiLCBzZXJ2aWNlQWNjb3VudEtleS5sZW5ndGgpXG4gICAgY29uc29sZS5sb2coXCLwn5SQIEtleSBzdGFydHMgd2l0aDpcIiwgc2VydmljZUFjY291bnRLZXkuc3Vic3RyaW5nKDAsIDIwKSArIFwiLi4uXCIpXG5cbiAgICAvLyBQYXJzZSB0aGUgSlNPTlxuICAgIGNvbnN0IGtleURhdGEgPSBKU09OLnBhcnNlKHNlcnZpY2VBY2NvdW50S2V5KVxuXG4gICAgY29uc3QgcmVxdWlyZWRGaWVsZHMgPSBbXCJ0eXBlXCIsIFwicHJvamVjdF9pZFwiLCBcInByaXZhdGVfa2V5XCIsIFwiY2xpZW50X2VtYWlsXCJdXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiByZXF1aXJlZEZpZWxkcykge1xuICAgICAgaWYgKCFrZXlEYXRhW2ZpZWxkXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNlcnZpY2UgYWNjb3VudCBrZXkgaXMgbWlzc2luZyByZXF1aXJlZCBmaWVsZDogJHtmaWVsZH1gKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpeCBuZXdsaW5lcyBpbiBwcml2YXRlIGtleSBpZiB0aGV5IHdlcmUgZXNjYXBlZFxuICAgIGlmIChrZXlEYXRhLnByaXZhdGVfa2V5KSB7XG4gICAgICBrZXlEYXRhLnByaXZhdGVfa2V5ID0ga2V5RGF0YS5wcml2YXRlX2tleS5yZXBsYWNlKC9cXFxcbi9nLCBcIlxcblwiKVxuICAgICAgY29uc29sZS5sb2coXCLwn5SQIFByaXZhdGUga2V5IGZvcm1hdCBjb3JyZWN0ZWRcIilcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhcIvCflJAgU2VydmljZSBhY2NvdW50IGVtYWlsOlwiLCBrZXlEYXRhLmNsaWVudF9lbWFpbClcbiAgICBjb25zb2xlLmxvZyhcIvCflJAgUHJvamVjdCBJRDpcIiwga2V5RGF0YS5wcm9qZWN0X2lkKVxuXG4gICAgcmV0dXJuIGtleURhdGFcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwi4p2MIEVycm9yIHBhcnNpbmcgc2VydmljZSBhY2NvdW50IGtleTpcIilcbiAgICBjb25zb2xlLmVycm9yKFwiICAgTWVzc2FnZTpcIiwgZXJyb3IubWVzc2FnZSlcblxuICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiVW5leHBlY3RlZCB0b2tlblwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2aWNlIGFjY291bnQga2V5IGlzIG5vdCB2YWxpZCBKU09OLiBDaGVjayBmb3IgZXNjYXBlZCBxdW90ZXMgb3IgZm9ybWF0dGluZyBpc3N1ZXMuYClcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJub3Qgc2V0XCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEdPT0dMRV9TRVJWSUNFX0FDQ09VTlRfS0VZIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQgaW4geW91ciBWZXJjZWwgcHJvamVjdCBzZXR0aW5ncy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBzZXJ2aWNlIGFjY291bnQga2V5OiAke2Vycm9yLm1lc3NhZ2V9YClcbiAgICB9XG4gIH1cbn1cblxuLy8gQ3JlYXRlIGFuZCBjb25maWd1cmUgR29vZ2xlIFNwcmVhZHNoZWV0IGNsaWVudFxuYXN5bmMgZnVuY3Rpb24gZ2V0R29vZ2xlU3ByZWFkc2hlZXRDbGllbnQoc3ByZWFkc2hlZXRJZCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKFwi8J+UkCBJbml0aWFsaXppbmcgR29vZ2xlIFNwcmVhZHNoZWV0IGNsaWVudC4uLlwiKVxuICAgIGNvbnN0IHNlcnZpY2VBY2NvdW50S2V5ID0gcGFyc2VTZXJ2aWNlQWNjb3VudEtleSgpXG5cbiAgICBjb25zdCBzZXJ2aWNlQWNjb3VudEF1dGggPSBuZXcgSldUKHtcbiAgICAgIGVtYWlsOiBzZXJ2aWNlQWNjb3VudEtleS5jbGllbnRfZW1haWwsXG4gICAgICBrZXk6IHNlcnZpY2VBY2NvdW50S2V5LnByaXZhdGVfa2V5LFxuICAgICAgc2NvcGVzOiBbXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3NwcmVhZHNoZWV0c1wiXSxcbiAgICB9KVxuXG4gICAgY29uc29sZS5sb2coXCLwn5SQIEpXVCBhdXRoZW50aWNhdGlvbiBjb25maWd1cmVkXCIpXG4gICAgY29uc29sZS5sb2coXCLwn5SQIENvbm5lY3RpbmcgdG8gc3ByZWFkc2hlZXQ6XCIsIHNwcmVhZHNoZWV0SWQpXG5cbiAgICAvLyBDcmVhdGUgR29vZ2xlIFNwcmVhZHNoZWV0IGluc3RhbmNlXG4gICAgY29uc3QgZG9jID0gbmV3IEdvb2dsZVNwcmVhZHNoZWV0KHNwcmVhZHNoZWV0SWQsIHNlcnZpY2VBY2NvdW50QXV0aClcblxuICAgIGNvbnNvbGUubG9nKFwi8J+TiiBMb2FkaW5nIHNwcmVhZHNoZWV0IGluZm8uLi5cIilcbiAgICBhd2FpdCBkb2MubG9hZEluZm8oKVxuXG4gICAgY29uc29sZS5sb2coXCLinIUgR29vZ2xlIFNwcmVhZHNoZWV0IGNsaWVudCBhdXRob3JpemVkIHN1Y2Nlc3NmdWxseVwiKVxuICAgIGNvbnNvbGUubG9nKGDwn5OKIENvbm5lY3RlZCB0bzogXCIke2RvYy50aXRsZX1cImApXG4gICAgY29uc29sZS5sb2coYPCfk4ogU2hlZXQgY291bnQ6ICR7ZG9jLnNoZWV0Q291bnR9YClcblxuICAgIHJldHVybiBkb2NcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwi4p2MIEdvb2dsZSBTcHJlYWRzaGVldCBhdXRob3JpemF0aW9uIGZhaWxlZDpcIilcbiAgICBjb25zb2xlLmVycm9yKFwiICAgTWVzc2FnZTpcIiwgZXJyb3IubWVzc2FnZSlcbiAgICBjb25zb2xlLmVycm9yKFwiICAgU3RhY2s6XCIsIGVycm9yLnN0YWNrKVxuXG4gICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJpbnZhbGlkX2dyYW50XCIpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwi8J+SoSBpbnZhbGlkX2dyYW50IGVycm9yIHNvbHV0aW9uczpcIilcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIgICAxLiBDaGVjayBzeXN0ZW0gY2xvY2sgaXMgc3luY2hyb25pemVkIChKV1QgdG9rZW5zIGFyZSB0aW1lLXNlbnNpdGl2ZSlcIilcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIgICAyLiBWZXJpZnkgcHJpdmF0ZSBrZXkgZm9ybWF0IChuZXdsaW5lcyBzaG91bGQgYmUgYWN0dWFsIFxcXFxuIGNoYXJhY3RlcnMpXCIpXG4gICAgICBjb25zb2xlLmVycm9yKFwiICAgMy4gRW5zdXJlIHNlcnZpY2UgYWNjb3VudCBoYXNuJ3QgYmVlbiBkZWxldGVkIG9yIGRpc2FibGVkXCIpXG4gICAgICBjb25zb2xlLmVycm9yKFwiICAgNC4gQ2hlY2sgaWYgc2VydmljZSBhY2NvdW50IGtleSBoYXMgYmVlbiByb3RhdGVkXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHb29nbGUgYXV0aGVudGljYXRpb24gZmFpbGVkOiBpbnZhbGlkX2dyYW50LiBDaGVjayBzeXN0ZW0gdGltZSBhbmQgc2VydmljZSBhY2NvdW50IGtleSBmb3JtYXQuXCIpXG4gICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiNDAzXCIpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJGb3JiaWRkZW5cIikpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCLwn5KhIDQwMyBGb3JiaWRkZW4gZXJyb3Igc29sdXRpb25zOlwiKVxuICAgICAgY29uc29sZS5lcnJvcihcIiAgIDEuIFNoYXJlIHRoZSBzcHJlYWRzaGVldCB3aXRoIHNlcnZpY2UgYWNjb3VudCBlbWFpbDpcIiwgcGFyc2VTZXJ2aWNlQWNjb3VudEtleSgpLmNsaWVudF9lbWFpbClcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIgICAyLiBHcmFudCAnRWRpdG9yJyBwZXJtaXNzaW9ucyB0byB0aGUgc2VydmljZSBhY2NvdW50XCIpXG4gICAgICBjb25zb2xlLmVycm9yKFwiICAgMy4gVmVyaWZ5IHRoZSBzcHJlYWRzaGVldCBJRCBpcyBjb3JyZWN0XCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFNwcmVhZHNoZWV0IGFjY2VzcyBkZW5pZWQuIFNoYXJlIHNwcmVhZHNoZWV0IHdpdGg6ICR7cGFyc2VTZXJ2aWNlQWNjb3VudEtleSgpLmNsaWVudF9lbWFpbH1gKVxuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIjQwNFwiKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKFwiTm90IEZvdW5kXCIpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwi8J+SoSA0MDQgTm90IEZvdW5kIGVycm9yIHNvbHV0aW9uczpcIilcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIgICAxLiBWZXJpZnkgdGhlIHNwcmVhZHNoZWV0IElEIGlzIGNvcnJlY3RcIilcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCIgICAyLiBDaGVjayBpZiB0aGUgc3ByZWFkc2hlZXQgZXhpc3RzIGFuZCBpcyBhY2Nlc3NpYmxlXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTcHJlYWRzaGVldCBub3QgZm91bmQuIENoZWNrIHRoZSBHT09HTEVfU1BSRUFEU0hFRVRfSUQuXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG59XG5cbi8vIFRlc3QgZnVuY3Rpb24gdG8gdmVyaWZ5IGNvbm5lY3Rpb25cbmFzeW5jIGZ1bmN0aW9uIHRlc3RHb29nbGVTaGVldHNDb25uZWN0aW9uKHNwcmVhZHNoZWV0SWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkb2MgPSBhd2FpdCBnZXRHb29nbGVTcHJlYWRzaGVldENsaWVudChzcHJlYWRzaGVldElkKVxuXG4gICAgY29uc29sZS5sb2coXCLinIUgU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBzcHJlYWRzaGVldDpcIiwgZG9jLnRpdGxlKVxuICAgIGNvbnNvbGUubG9nKGDwn5OKIFNoZWV0IGNvdW50OiAke2RvYy5zaGVldENvdW50fWApXG5cbiAgICAvLyBMaXN0IGF2YWlsYWJsZSBzaGVldHNcbiAgICBkb2Muc2hlZXRzQnlJbmRleC5mb3JFYWNoKChzaGVldCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGAgICAke2luZGV4ICsgMX0uICR7c2hlZXQudGl0bGV9ICgke3NoZWV0LnJvd0NvdW50fSByb3dzLCAke3NoZWV0LmNvbHVtbkNvdW50fSBjb2xzKWApXG4gICAgfSlcblxuICAgIHJldHVybiB0cnVlXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIuKdjCBDb25uZWN0aW9uIHRlc3QgZmFpbGVkOlwiLCBlcnJvci5tZXNzYWdlKVxuXG4gICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCI0MDNcIikgfHwgZXJyb3IubWVzc2FnZS5pbmNsdWRlcyhcIkZvcmJpZGRlblwiKSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIvCfkqEgNDAzIEZvcmJpZGRlbiB1c3VhbGx5IG1lYW5zOlwiKVxuICAgICAgY29uc29sZS5lcnJvcihcIiAgIC0gU3ByZWFkc2hlZXQgaXMgbm90IHNoYXJlZCB3aXRoIHNlcnZpY2UgYWNjb3VudFwiKVxuICAgICAgY29uc29sZS5lcnJvcihcIiAgIC0gU2VydmljZSBhY2NvdW50IGVtYWlsOlwiLCBwYXJzZVNlcnZpY2VBY2NvdW50S2V5KCkuY2xpZW50X2VtYWlsKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCB7IGdldEdvb2dsZVNwcmVhZHNoZWV0Q2xpZW50LCB0ZXN0R29vZ2xlU2hlZXRzQ29ubmVjdGlvbiB9XG4iXSwibmFtZXMiOlsiR29vZ2xlU3ByZWFkc2hlZXQiLCJKV1QiLCJwYXJzZVNlcnZpY2VBY2NvdW50S2V5Iiwic2VydmljZUFjY291bnRLZXkiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX1NFUlZJQ0VfQUNDT1VOVF9LRVkiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJrZXlEYXRhIiwiSlNPTiIsInBhcnNlIiwicmVxdWlyZWRGaWVsZHMiLCJmaWVsZCIsInByaXZhdGVfa2V5IiwicmVwbGFjZSIsImNsaWVudF9lbWFpbCIsInByb2plY3RfaWQiLCJlcnJvciIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsImdldEdvb2dsZVNwcmVhZHNoZWV0Q2xpZW50Iiwic3ByZWFkc2hlZXRJZCIsInNlcnZpY2VBY2NvdW50QXV0aCIsImVtYWlsIiwia2V5Iiwic2NvcGVzIiwiZG9jIiwibG9hZEluZm8iLCJ0aXRsZSIsInNoZWV0Q291bnQiLCJzdGFjayIsInRlc3RHb29nbGVTaGVldHNDb25uZWN0aW9uIiwic2hlZXRzQnlJbmRleCIsImZvckVhY2giLCJzaGVldCIsImluZGV4Iiwicm93Q291bnQiLCJjb2x1bW5Db3VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./utils/googleAuth.js\n");

/***/ })

};
;